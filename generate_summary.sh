#generate_summary.sh
#!/usr/bin/env bash

# This script scans the Rails application's common directories to identify models,
# controllers, services, and other key files. It attempts to extract:
# - File type (model, controller, service, etc.)
# - File path
# - Short description (taken from initial comments or class/module definition)
#
# The output is generated by the generate_summary function and is saved to app_summary.json.

set -e

BASE_DIR=$(pwd)
OUTPUT_FILE="app_summary.json"

# Function to extract a short description from a file
extract_description() {
  local file_path="$1"
  # Extract initial comments or the first class/module line
  local head_lines
  head_lines=$(head -n 10 "$file_path")

  # Extract comment lines or class/module definitions
  local doc
  doc=$(echo "$head_lines" | grep -E '^#|^\s*(class|module)' | sed 's/^[#[:space:]]*//g' | tr '\n' ' ')

  if [ -z "$doc" ]; then
    doc="No top-level documentation found."
  fi

  echo "$doc"
}

# Function to process ruby files in a given directory and append to ALL_ITEMS
process_directory() {
  local dir_path="$1"
  local file_type="$2"

  # Find all .rb files and iterate
  find "$dir_path" -type f -name "*.rb" | sort | while read -r file; do
    [ -f "$file" ] || continue
    local desc
    desc=$(extract_description "$file")
    local absolute_path
    absolute_path=$(cd "$(dirname "$file")" && pwd)/$(basename "$file")
    local relative_path
    relative_path="${absolute_path#$BASE_DIR/}"

    # Add a comma if ALL_ITEMS is not empty
    if [ -n "$ALL_ITEMS" ]; then
      ALL_ITEMS="${ALL_ITEMS},"
    fi

    ALL_ITEMS="${ALL_ITEMS}
    {
      \"path\": \"${relative_path}\",
      \"type\": \"${file_type}\",
      \"description\": \"${desc}\"
    }"
  done
}

# Function to process view files and append to ALL_ITEMS
process_views() {
  find "app/views" -type f \( -name "*.erb" -o -name "*.haml" -o -name "*.html" \) | sort | while read -r file; do
    local absolute_path
    absolute_path=$(cd "$(dirname "$file")" && pwd)/$(basename "$file")
    local relative_path
    relative_path="${absolute_path#$BASE_DIR/}"

    # Add a comma if ALL_ITEMS is not empty
    if [ -n "$ALL_ITEMS" ]; then
      ALL_ITEMS="${ALL_ITEMS},"
    fi

    ALL_ITEMS="${ALL_ITEMS}
    {
      \"path\": \"${relative_path}\",
      \"type\": \"view\",
      \"description\": \"View template for rendering UI.\"
    }"
  done
}

# Function that generates the summary and prints to stdout without trailing commas
generate_summary() {
  ALL_ITEMS=""

  # Process directories
  if [ -d "app/models" ]; then
    process_directory "app/models" "model"
  fi

  if [ -d "app/controllers" ]; then
    process_directory "app/controllers" "controller"
  fi

  if [ -d "app/services" ]; then
    process_directory "app/services" "service"
  fi

  if [ -d "app/views" ]; then
    process_views
  fi

  # Print the final JSON
  echo "{"
  echo "  \"files\": ["
  # Print ALL_ITEMS indented by two spaces
  if [ -n "$ALL_ITEMS" ]; then
    echo "$ALL_ITEMS" | sed 's/^    //'
  fi
  echo "  ]"
  echo "}" | jq .
}

# Generate the summary and save to the output file
generate_summary > "$OUTPUT_FILE"

echo "Summary generated and saved to $OUTPUT_FILE."
